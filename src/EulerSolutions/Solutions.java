// Mohamed Ali Ramadan

// Description:
// My solutions to the Project Euler problems.

package EulerSolutions;

public class Solutions
{
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    // The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.
    public static int Problem_1() // CORRECT
    {
        int sum = 0;
        for (int i = 0; i < 1000; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                sum += i;
            }
        }
        return sum;
    }

    // Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    // By starting with 1 and 2, the first 10 terms will be:
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    // find the sum of the even-valued terms.
    public static int Problem_2() // CORRECT
    {
        int sum = 2; // Since first two fibonacci numbers, 1 and 2 are not verified. 2 is even, so must be included.
        final int FIB_LIMIT = 4 * (int)Math.pow(10, 6); // 4 million

        int first = 1;
        int second = 2;

        while (true)
        {
            int nextFibNum = first + second;

            if (nextFibNum > FIB_LIMIT)
            {
                break;
            }

            if (nextFibNum % 2 == 0) // If fibonacci number is even, add it to sum.
            {
                sum += nextFibNum;
            }

            first = second;
            second = nextFibNum;
        }

        return sum;
    }

    // The prime factors of 13195 are 5, 7, 13 and 29.
    // What is the largest prime factor of the number 600851475143 ?
    public static long Problem_3()
    {
        /*
        final long input = 600851475143L;

        long currentLargestPrimeFactor = 1;

        // Hypothesis: It is pointless to test a value that is over 50% of the input,
        long testUntilValue = (long)Math.ceil(input / 2);

        for(long i = 1; i < testUntilValue; i++)
        {
            if (input % i == 0)
            {

            }
        }


        */

        return -1;
    }

    // A palindromic number reads the same both ways. The largest palindrome made
    // from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
    // Find the largest palindrome made from the product of two 3-digit numbers.
    public static int Problem_4() // CORRECT
    {
        int currentMax = -1;

        for (int leftFactor = 999; leftFactor > 100; leftFactor--)
        {
            for (int rightFactor = leftFactor; rightFactor > 100; rightFactor--)
            {
                // Create array of characters.
                int product = leftFactor * rightFactor;
                String productAsString =  String.format("%d", product);
                char[] productAsCharacters = productAsString.toCharArray();

                // Counters and flags for verifying if the number is palindrome.
                int length = productAsCharacters.length;
                int leftIndex = 0;
                int rightIndex = length - 1;
                boolean isPalindrome = true;
                int numberOfChecks = length / 2;


                for (int i = 0; i < numberOfChecks; i++)
                {
                    if (productAsCharacters[leftIndex] != productAsCharacters[rightIndex])
                    {
                        // Not a palindrome number.
                        isPalindrome = false;
                        break;
                    }
                    else
                    {
                        leftIndex++;
                        rightIndex--;
                    }
                }

                if (isPalindrome && product > currentMax)
                {
                    currentMax = product;
                }
            }
        }

        return currentMax;
    }
}
